package org.example.mysqldemo.MySQLTest;

public class Summarize {
    /*
     * MySQL是建立在关系模型基础上的多张相互连接的二维表组成的数据库
     *       格式统一使用方便便于维护
     *
     * SQL语句：单行或者多行书写，以分号结尾
     *   语句分类：DDL定义；DML管理；DQL查询；DCL控制
     *
     * 数据库设计DDL：定义数据库对象语言
     *           表(创建,查询,修改,删除)
     *               创建的时候根据性能或者存储空间要求选择不同的数据类型create table();
     *               查询表以及字段show tables;   desc 字段名;
     *               修改字段以及表名rename table 原表名 to 新表名;   alter table 表名  add/modify/change/drop 字段名
     *               删除表drop table if exists 表名;
     * 数据库管理DML:对数据进行crud操作
     *         添加:insert into 表名(字段名...) values(值...,now()->更新创建时间和修改时间);
     *         更新/修改:update 表名 set 字段名=值,....[where 条件];
     *         删除:delete from 表名 where条件;
     *              删除后id更新问题:alter table students drop id;
     *                            alter table students add id int(11) primary key auto_increment FIRST;
     *数据库查询DQL:查询数据库操作
     *         语法:select
     *                  字段列表(不推荐使用*查询所有字段,因为不直观和性能低)(还可以通过if和case对不同标签重命名赋值)
     *              from
     *                  表名列表
     *              where
     *                  条件列表(重点模糊匹配like)
     *              group by
     *                  分组字段列表
     *              having
     *                  分组后条件列表
     *              order by
     *                  排序字段列表(默认asc)
     *              limit
     *                  分页列表
     *
     * 多表设计:业务之间相互关联,各种表结构之间也相互联系(一对多,一对一,多对多)
     *      一对多:例如部门和员工的表设计->主表和副表,但是需要添加外键来保证两个表数据的一致性和完整性(逻辑外键或者物理外键)
     *      一对一:人和身份证(可以进行单表拆分,在任意一方添加外键)
     *      多对多:学生和老师的关系(建立一个中间表来实现 )
     *
     * 多表查询:会出现笛卡尔积情况->两个表所有的组合情况
     *      所以多表查询要去除掉多余的笛卡尔积
     * 查询分类:连接查询(内连接和外连接)和子查询
     *           内连接:隐式内连接和显式内连接
     *           外连接：查询两表交集以及一张表的全部信息
     *           子查询：sql语句中嵌套select语句（分为标量->返回值是一个数，列，行，表）
     *
     * 事务:一组操作的集合，事务中的操作同时成功或者同时失败
     *      开启事务：start transaction； /begin；
     *      提交事务：commit；
     *      回滚事务：rollback；
     * 事务的四大特性：A（原子性：事务中操作不可分割）I（隔离性：事务不受外部并发操作影响）
     *              D（持久性：一旦提交或者回滚，对数据的改变是永久的）C（一致性：事务完成所有数据保持一致）
     *
     * mysql索引：建立索引（create index 索引名 on 表名（字段名））
     *          index是帮助数据库高效获取数据的数据结构，就相当于书的目录，但索引也会占据存储空间
     *          默认来说都是B+树索引（二叉搜索树数据多的时候会退化，二叉搜索树和红黑树高度过高，搜索耗时久且不稳定）
     *              B+树（多路平衡搜索树）好处：一个节点可以存储多个key，叶子节点保存数据，叶子节点形成双向链表范围搜索快，高度一致搜索速度稳定
     *
     * */
}
